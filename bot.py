#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2020 Gerasimov Alexander <samik.mechanic@gmail.com>
#
# @assassinsgwbot
# Main bot module
#

import telebot, os, time
from telebot import types
from logger import get_logger
from flask import Flask, request

import common
from common import bot
from icons import *
from battle import *
from warprecheck import *
from arsenal import *
from numberscheck import *
from screens import *
from commands import COMMANDS
import keyboards as kb
import callbacks as cb
import helpers as hlp

log = get_logger("bot")

DOUBLESHOP_TIME = [4, [17, 58], [18, 13]]
DOUBLESHOP_TIME_CALLED = False

#####################
# Callback handlers #
#####################

#
# Chosen inline result handler
#
@bot.chosen_inline_handler(lambda result: True)
def chosen_inline_handler(r):
    # print("chosen_inline_handler")
    # print(r)
    user = [r.from_user.id, r.from_user.username, r.from_user.first_name]
    if r.result_id == 'battle':
        log.debug("User %d (%s %s) created battle check (%s)" % (*user, r.query))
        times = hlp.IsCheckTimeQuery(r)[1]
        common.current_battle = Battle(times[0], times[1])
        common.current_battle.SetMessageID(r.inline_message_id)
        bot.edit_message_text(common.current_battle.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_CHECK)
    elif r.result_id == 'precheck':
        log.debug("User %d (%s %s) created pre-check" % (*user,))
        common.current_precheck = WarPreCheck()
        common.current_precheck.SetMessageID(r.inline_message_id)
        bot.edit_message_text(common.current_precheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_PRECHECK)
    elif r.result_id == 'arsenal':
        log.debug("User %d (%s %s) created arsenal check" % (*user,))
        common.current_arscheck = Arsenal()
        common.current_arscheck.SetMessageID(r.inline_message_id)
        common.current_arscheck.SetRage(common.rage_time_workaround)
        bot.edit_message_text(common.current_arscheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_ARS)
    elif r.result_id == 'numbers':
        res, numbers = hlp.IsNumbersQuery(r)
        if len(numbers) == 1:
            log.debug("User %d (%s %s) created screens numbers check (%s)" % (*user, numbers[0]))
            common.current_numcheck = NumbersCheck(int(numbers[0]))
            common.current_numcheck.SetMessageID(r.inline_message_id)
        else:
            log.debug("User %d (%s %s) created in-game numbers check (%s)" % (*user, ' '.join(str(num) for num in numbers)))
            common.current_numcheck = NumbersCheck(len(numbers), ingame=True, ingame_nums=numbers)
            common.current_numcheck.SetMessageID(r.inline_message_id)
        bot.edit_message_text(common.current_numcheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_NUMBERS)
    else:
        log.error("Invalid chosen inline result incoming!")

####################
# Command handlers #
####################

#
# Help command
# (private bot chat)
#
@bot.message_handler(commands=["help"])
def show_help(m):
    userid = m.from_user.id
    text =  ICON_SWORDS+" –ü—Ä–∏–≤–µ—Ç! –Ø –≤–æ–µ–Ω–Ω—ã–π –±–æ—Ç –≥–∏–ª—å–¥–∏–∏ *Assassins*\n"
    text += "üéÆ –ò–≥—Ä–∞: *Dungeon Hunter V*"
    text += "\n\nüìÉ *–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥*:\n"
    text += "/help - –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n"
    text += "/admins - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–µ—Ä–æ–≤\n"
    if hlp.IsUserAdmin(m):
        if str(userid) == common.ROOT_ADMIN[0]:
            text += "/setadmins –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤ (–≤ –≤–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ)\n"
        text += "/reset - –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å–±—Ä–æ—Å –±–æ—Ç–∞\n"
        text += "–¢–∞–∫–∂–µ —è —É–º–µ—é `—Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º` –∏–∑ –ø–æ–∏—Å–∫–∞ –≥–∏–ª—å–¥–∏–π, " + \
                "–µ—Å–ª–∏ –ø–æ—Å–ª–∞—Ç—å –∏—Ö –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∞–ª—å–±–æ–º–∞.\n"

        text += "\n*–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—è:*\n"
        text += "/bstart - –Ω–∞—á–∞—Ç—å –±–æ–π\n"
        text += "/bstop  - –∑–∞–≤–µ—Ä—à–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –±–æ–π\n"
        text += "/checklist  - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ç–µ–∫—É—â–µ–º –±–æ—é\n"
        text += "\n*–í –≤–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ:*\n" + \
                "/warchat - –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–µ–Ω–Ω—ã–π —á–∞—Ç _(–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—è)_\n" + \
                "/snow - –≤—ã–∑–≤–∞—Ç—å –°–Ω–µ–≥—É—Ä–æ—á–∫—É! _(—Ç–æ–ª—å–∫–æ –≤ –í—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –í–ì)_\n" + \
                "_@assassinsgwbot —á–µ–∫_ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì\n" + \
                "_@assassinsgwbot XX:XX YY:YY_ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –Ω–∞ –±–æ–π\n" + \
                "_@assassinsgwbot –∞—Ä—Å XX:XX_ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ—è)\n" + \
                "_@assassinsgwbot –Ω–æ–º–µ—Ä–∞ X_ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –• –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Å–∫—Ä–∏–Ω–∞–º (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ—è)\n" + \
                "_@assassinsgwbot –Ω–æ–º–µ—Ä–∞ X Y Z ..._ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∏–≥—Ä–µ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ—è)\n" + \
                "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤—Ä–µ–º–µ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–º–∏ (–¥–∞–∂–µ –ø—Ä–æ–±–µ–ª–æ–º)"
    else:
        pass # stub for adding only non-admin help
    bot.send_message(userid, text, parse_mode="markdown")
    if not hlp.IsUserAdmin(m):
        hlp.SendHelpNonAdmin(m)
    bot.delete_message(m.chat.id, m.message_id)

#
# Start pending battle
# (private bot chat)
#
@bot.message_handler(commands=['warchat'])
def command_set_warchat(m):
    if hlp.IsInPrivateChat(m):
        hlp.SendHelpWrongChat(m.from_user.id, "/warchat", "–∑–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–µ–Ω–Ω—ã–π —á–∞—Ç", False)
        return
    bot.delete_message(m.chat.id, m.message_id)
    if not hlp.IsUserAdmin(m):
        hlp.SendHelpNonAdmin(m)
        return
    
    if common.warchat_id != None and common.warchat_id == m.chat.id:
        bot.send_message(m.from_user.id, ICON_CANCEL+" –í–æ–µ–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –∑–∞–¥–∞–Ω!")
    else:
        common.warchat_id = m.chat.id
        log.info("war chat set: ", common.warchat_id)
        bot.send_message(m.from_user.id, ICON_CHECK+" –í–æ–µ–Ω–Ω—ã–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!")


#
# Start utility command
# (private bot chat)
#
@bot.message_handler(commands=['start'])
def command_start(m):
    # print("command_start")
    # print(m)
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/start", "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–µ", True)
        return
    if not hlp.IsUserAdmin(m):
        hlp.SendHelpNonAdmin(m)
        return
    inline_error = m.text.replace("/start ", "")
    if inline_error != "":
        if inline_error == "existing_precheck":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì.\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n" % ICON_STOP) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –æ—à–∏–±–æ—á–Ω–æ - –∑–∞–≤–µ—Ä—à–∏—Ç–µ —á–µ–∫, " + \
                    "–∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)
        elif inline_error == "existing_battle":
            if not hlp.CanStartNewBattle():
                text =  "–¢–µ–∫—É—â–∏–π –±–æ–π: %0.2d:%0.2d / %0.2d:%0.2d.\n\n" \
                        % (common.current_battle.time["check"].hour, common.current_battle.time["check"].minute,
                           common.current_battle.time["start"].hour, common.current_battle.time["start"].minute)
                text += ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å (%s) –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n" % ICON_STOP) + \
                         "–ï—Å–ª–∏ –±–æ–π –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –æ—à–∏–±–æ—á–Ω–æ - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ–π, " + \
                         "–∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
                bot.send_message(m.chat.id, text)
            else:
                hlp.SendHelpNoBattle(m.chat.id)
        elif inline_error == "existing_arsenal":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∂–µ—á—å (%s) –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) —Ç–µ–∫—É—â–∏–π.\n" % (ICON_RAGE, ICON_STOP)) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –∞—Ä—Å–∞ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ (–∏–ª–∏ —è—Ä–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –±–æ–µ) - " + \
                    "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)
        elif inline_error == "existing_numbers":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç–∏—á—å —Ö–æ—Ç—è –±—ã '500' –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) –µ–≥–æ.\n" % ICON_STOP) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ (–∏–ª–∏ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ö–æ—Ç—è –±—ã '500') - " + \
                    "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)


#
# Start pending battle
# (private bot chat)
#
@bot.message_handler(commands=['bstart'])
def command_battle_start(m):
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/bstart", "–Ω–∞—á–∞—Ç—å –±–æ–π", True)
        return
    if not hlp.IsUserAdmin(m):
        hlp.SendHelpNonAdmin(m)
        return
    if not hlp.CanStartNewBattle():
        if not common.current_battle.is_started:
            text = "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π [%0.2d:%0.2d]?" \
                    % (common.current_battle.time["start"].hour, common.current_battle.time["start"].minute)
            bot.send_message(m.chat.id, text, reply_markup=kb.KEYBOARD_START)
        else:
            bot.send_message(m.chat.id, "–ë–æ–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    else:
        hlp.SendHelpNoBattle(m.chat.id)

#
# Stop current battle
# (private bot chat)
#
@bot.message_handler(commands=['bstop'])
def command_battle_stop(m):
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/bstop", "–∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±–æ–π", True)
        return
    if not hlp.IsUserAdmin(m):
        hlp.SendHelpNonAdmin(m)
        return
    if not hlp.CanStartNewBattle():
        if not common.current_battle.is_postponed:
            text = "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π [%0.2d:%0.2d]?" \
                    % (common.current_battle.time["start"].hour, common.current_battle.time["start"].minute)
            bot.send_message(m.chat.id, text, reply_markup=kb.KEYBOARD_STOP)
        else:
            bot.send_message(m.chat.id, "–ë–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
    else:
        hlp.SendHelpNoBattle(m.chat.id)

#
# Get check list for current battle
# (private bot chat)
#
@bot.message_handler(commands=['checklist'])
def command_battle_checklist(m):
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/checklist", "–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –±–æ—é", True)
        return
    if not hlp.IsUserAdmin(m):
        hlp.SendHelpNonAdmin(m)
        return
    if not hlp.CanStartNewBattle():
        checklist = ""
        for user in common.current_battle.GetActiveUsersNames():
            checklist += user + "\n"
        bot.send_message(m.chat.id, checklist)
    else:
        hlp.SendHelpNoBattle(m.chat.id)

#
# Update bot admins list
# (war chat where admins reside)
#
@bot.message_handler(commands=["setadmins"])
def setup_admins(m):
    
    # print("setup_admins")
    # print(m)
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to update admins list" % (*user,))
    if not hlp.IsUserAdmin(m):
        log.error("Failed (not an admin)")
        hlp.SendHelpNonAdmin(m)
        return
    if hlp.IsInPrivateChat(m):
        log.error("Failed (in private chat)")
        hlp.SendHelpWrongChat(user[0], "/setadmins", "–æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤", False)
        return
    is_chat_admin = False
    chat_admins = bot.get_chat_administrators(m.chat.id).wait()
    for admin in chat_admins:
        if admin.user.id == user[0]:
            is_chat_admin = True
            break
    if not is_chat_admin:
        log.error("Failed (not a chat admin)")
        hlp.SendHelpNonAdmin(m)
        return
    admins = {}
    for admin in chat_admins:
        if str(admin.user.id) != common.ROOT_ADMIN[0] and admin.user.username != common.BOT_USERNAME:
            name_record = admin.user.first_name
            if admin.user.username != None:
                name_record += " (" + admin.user.username + ")"
            admins[str(admin.user.id)] = name_record
    common.SaveAdminsList(admins)
    bot.send_message(m.chat.id, "üëÆüèª‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
    log.info("Admins list updated")

#
# Manage admins
# (private bot chat)
#
@bot.message_handler(commands=["admins"])
def manage_admins(m):
    # print("manage_admins")
    # print(m)
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to check admins list" % (*user,))
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(user[0], "/admins", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤", True)
        return
    text =  "–°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤:\n\n"
    text += "üëÅ %s _[–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞]_\n" % common.ROOT_ADMIN[1]
    for admin in common.admins:
        if common.BOT_USERNAME not in admin or admin != common.ROOT_ADMIN[1]:
            if str(user[0]) == ROOT_ADMIN[0]: # show admins IDs for root admin
                text += ICON_MEMBER+" %s _(ID=%s)_\n" % (common.admins[admin], admin)
            else:
                text += (ICON_MEMBER+" %s\n" % common.admins[admin])
    bot.send_message(user[0], text, parse_mode="markdown")
    return

#
# Emergency reset all checks
# (private bot chat)
#
@bot.message_handler(commands=['reset'])
def command_reset(m):
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/reset", "–≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–æ—Ç–∞", True)
        return
    if not hlp.IsUserAdmin(m):
        hlp.SendHelpNonAdmin(m)
        return
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to reset bot" % (*user,))
    bot.send_message(m.chat.id, "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å?", reply_markup=kb.KEYBOARD_RESET)

#
# Battle control
# (private bot chat)
#
@bot.message_handler(func=lambda message: message.text in kb.CHECK_CONTROL_OPTIONS_PRIVATE)
def battle_control(m):
    # it is a bug actually to use privately generated keyboard buttons outside private bot chat
    # should not happen in any case, but who knows?
    if not hlp.IsInPrivateChat(m):
        return
    if not hlp.IsUserAdmin(m):
        hlp.SendHelpNonAdmin(m)
        return
    markup = types.ReplyKeyboardRemove(selective=False)
    if m.text == kb.buttonStartPrivate.text:
        common.current_battle.DoStartBattle()
        bot.edit_message_text(common.current_battle.GetText(), inline_message_id=common.current_battle.check_id, 
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_LATE)
        bot.send_message(m.chat.id, "‚úÖ –ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", reply_markup=markup)
        common.current_battle.BattleStartNotifyActiveUsers()
    elif m.text == kb.buttonStopPrivate.text:
        reset_control(m)
        bot.send_message(m.chat.id, "‚ùé –ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=markup)
    else: # –û—Ç–º–µ–Ω–∞
        bot.send_message(m.chat.id, "‚õîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)

#
# Call for fun mode 'Snow White'
# (war chat command)
#
@bot.message_handler(commands=['snow'])
def command_snow(m):
    # print(m)
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to call Snow!" % (*user,))
    if hlp.IsInPrivateChat(m):
        hlp.SendHelpWrongChat(m.from_user.id, "/snow", "–≤—ã–∑–≤–∞—Ç—å –°–Ω–µ–≥—É—Ä–æ—á–∫—É", False)
        return
    bot.delete_message(m.chat.id, m.message_id)
    if not hlp.IsUserAdmin(m):
        log.error("Failed: not an admin")
        hlp.SendHelpNonAdmin(m)
        return
    if not hlp.IsSnowAvailable():
        bot.send_message(user[0], "–û–π! –í—ã–∑–≤–∞—Ç—å –°–Ω–µ–≥—É—Ä–æ—á–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –í–ì!")
        log.error("Failed: wrong time")
        return
    
    if common.current_snowwhite == {}:
        common.current_snowwhite["message"] = bot.send_message(m.chat.id,
                                             ICON_SNOW+" –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!",
                                             reply_markup=kb.KEYBOARD_SNOWWHITE).wait()
        common.current_snowwhite["praised"] = []
        log.info("Snow White called!")
    else:
        log.error("Snow White is already here!")

#
# Snow White control
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data == cb.SNOW_PRAISE_CALLBACK)
def snow_control(call):
    # print("snow_control")
    # print(call)
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    log.debug("User %d (%s %s) is cheering Snow White" % (*user,))
    
    if common.current_snowwhite != {}:
        if not user[0] in common.current_snowwhite["praised"]:
            log.debug("Praised")
            bot.send_message(call.message.chat.id, hlp.SnowGeneratePraise(user),
                             parse_mode="markdown", disable_notification=True)
            common.current_snowwhite["praised"].append(user[0])
            bot.answer_callback_query(call.id)
        else:
            log.error("Failed: already praised")
            bot.answer_callback_query(call.id, "–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –°–Ω–µ–≥—É—Ä–æ—á–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!")
        if not hlp.IsSnowAvailable():
            log.info("Snow White overtime, ending")
            bot.delete_message(common.current_snowwhite["message"].chat.id, common.current_snowwhite["message"].message_id)
            bot.send_message(call.message.chat.id,
                             ICON_SNOW+" –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å–ª–µ–¥—é—É—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ!",
                             disable_notification=True)
            common.current_snowwhite = {}
        return
    log.error("Bug! User pressed Snow White keyboard button with to current_snowwhite!")
    bot.answer_callback_query(call.id)

if "HEROKU" in list(os.environ.keys()):
    log.warning("Running on Heroku, setup webhook")
    server = Flask(__name__)

    @server.route('/bot' + common.TOKEN, methods=['POST'])
    def getMessage():
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return "!", 200

    @server.route("/")
    def webhook():
        time.sleep(1)
        bot.set_webhook(url='https://' + common.BOT_USERNAME + '.herokuapp.com/bot' + common.TOKEN)
        return "?", 200
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 80)))
else:
    log.warning("Running locally, start polling")
    bot.remove_webhook()
    bot.polling(none_stop=True, interval=0, timeout=20)
