#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2020 Gerasimov Alexander <samik.mechanic@gmail.com>
#
# @assassinsgwbot
# Main bot module
#

import telebot, os, time, datetime
from telebot import types
from logger import get_logger
from flask import Flask, request

import common
from common import bot
from icons import *
from checks.battle import *
from checks.warprecheck import *
from checks.crystals import *
from checks.arsenal import *
from checks.numberscheck import *
from checks.screens import *
from settings.settings import *
from statistics import *
from guide import *
from commands import COMMANDS
import keyboards as kb
import callbacks as cb
import helpers as hlp

log = get_logger("bot.root")

#####################
# Callback handlers #
#####################

#
# Chosen inline result handler
#
@bot.chosen_inline_handler(lambda result: True)
def chosen_inline_handler(r):
    # print("chosen_inline_handler")
    # print(r)
    user = User(r.from_user.id, r.from_user.first_name, r.from_user.username)
    if r.result_id == 'battle':
        log.debug("%s created battle check (%s)" % (user, r.query))
        _, time, comment = hlp.IsCheckTimeQuery(r)
        hlp.LogEvent(ICON_SWORDS + " %s –Ω–∞–∑–Ω–∞—á–∏–ª –±–æ–π –Ω–∞ %s" % (user.GetString(with_link=False), time))
        common.current_battle = Battle(time, comment)
        common.current_battle.SetMessageID(r.inline_message_id)
        bot.edit_message_text(common.current_battle.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=common.current_battle.keyboard)
    elif r.result_id == 'precheck':
        log.debug("%s created pre-check" % user)
        common.current_precheck = WarPreCheck()
        common.current_precheck.SetMessageID(r.inline_message_id)
        bot.edit_message_text(common.current_precheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_PRECHECK)
    elif r.result_id == 'cryscheck':
        ranges = common.settings.GetSetting("crystals_ranges")
        log.debug("%s created crystals check" % user)
        common.current_cryscheck = Crystals(ranges)
        common.current_cryscheck.SetMessageID(r.inline_message_id)
        bot.edit_message_text(common.current_cryscheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_CRYSTALS)
    elif r.result_id == 'arsenal':
        log.debug("%s created arsenal check" % user)
        _, time = hlp.IsArsQuery(r)
        hlp.LogEvent(ICON_ARS + " %s —Å–æ–∑–¥–∞–ª —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞ (—è—Ä–æ—Å—Ç—å –≤ %s)" % (user.GetString(with_link=False), time))
        common.current_arscheck = Arsenal(time)
        common.current_arscheck.SetMessageID(r.inline_message_id)
        bot.edit_message_text(common.current_arscheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_ARS).wait()
        rage_msg_text = ICON_RAGE+" *–Ø—Ä–æ—Å—Ç—å –≤ %0.2d:%0.2d*" % (common.current_arscheck.rage_time.hour, common.current_arscheck.rage_time.minute)
        rage_msg = bot.send_message(common.warchat_id, rage_msg_text, parse_mode="markdown").wait()
        common.current_arscheck.SetRageMessageID(rage_msg.message_id)
        if common.settings.GetSetting("pin") and not common.DEBUG_MODE:
            bot.pin_chat_message(common.warchat_id, rage_msg.message_id)
    elif r.result_id == 'numbers':
        log.debug("%s created numbers check" % user)
        _, numbers = hlp.IsNumbersQuery(r)
        if len(numbers) == 1:
            hlp.LogEvent(ICON_NUMBERS + " %s —Å–æ–∑–¥–∞–ª —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ (%s)" % (user.GetString(with_link=False), numbers[0]))
            log.debug("%s created screens numbers check (%s)" % (user, numbers[0]))
            common.current_numcheck = NumbersCheck(int(numbers[0]))
            common.current_numcheck.SetMessageID(r.inline_message_id)
        else:
            hlp.LogEvent(ICON_NUMBERS + " %s —Å–æ–∑–¥–∞–ª —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∏–≥—Ä–µ (%s)" % (user.GetString(with_link=False), len(numbers)))
            log.debug("%s created in-game numbers check (%s)" % (user, ' '.join(str(num) for num in numbers)))
            common.current_numcheck = NumbersCheck(len(numbers), ingame=True, ingame_nums=numbers)
            common.current_numcheck.SetMessageID(r.inline_message_id)
        bot.edit_message_text(common.current_numcheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_NUMBERS)
    else:
        log.error("Invalid chosen inline result incoming!")

####################
# Command handlers #
####################

#
# Help command
# (private bot chat)
#
@bot.message_handler(commands=["help"])
def show_help(m):
    userid = m.from_user.id
    text =  ICON_SWORDS+" –ü—Ä–∏–≤–µ—Ç! –Ø –≤–æ–µ–Ω–Ω—ã–π –±–æ—Ç –≥–∏–ª—å–¥–∏–∏ *Assassins*\n"
    text += "üéÆ –ò–≥—Ä–∞: *Dungeon Hunter V*"
    text += "\n\nüìÉ *–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥*:\n"
    text += "/help –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n"
    text += "/admins –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–µ—Ä–æ–≤\n"
    if hlp.IsUserAdmin(m.from_user.id):
        if str(userid) == common.ROOT_ADMIN[0]:
            text += "/settings –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
            text += "/statbackup —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            text += "/statrestore –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n"
            text += "/debug –í–ö–õ/–í–´–ö–õ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏\n"
        text += "/officer –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –æ—Ñ–∏—Ü–µ—Ä–æ–≤\n"
        text += "/reset –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å–±—Ä–æ—Å –±–æ—Ç–∞\n"
        # text += "\n–¢–∞–∫–∂–µ —è —É–º–µ—é `—Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º` –∏–∑ –ø–æ–∏—Å–∫–∞ –≥–∏–ª—å–¥–∏–π, " + \
        #         "–µ—Å–ª–∏ –ø–æ—Å–ª–∞—Ç—å –∏—Ö –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∞–ª—å–±–æ–º–∞.\n"

        text += "\n %s *–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—è:*\n" % ICON_SWORDS
        text += "/bstart –Ω–∞—á–∞—Ç—å –±–æ–π\n"
        text += "/bstop –∑–∞–≤–µ—Ä—à–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –±–æ–π\n"
        text += "/checklist –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ç–µ–∫—É—â–µ–º –±–æ—é\n"

        text += "\nüó° *–í –≤–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ:*\n"
        if str(userid) == common.ROOT_ADMIN[0]:
            text += "/setadmins –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤ (–≤ –≤–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ)\n"
            text += "/logchat –∑–∞–ø–æ–º–Ω–∏—Ç—å —á–∞—Ç —Å–æ–±—ã—Ç–∏–π\n"
            text += "/debugchat –∑–∞–ø–æ–º–Ω–∏—Ç—å —á–∞—Ç –æ—Ç–ª–∞–¥–∫–∏\n"
        text += "/warchat –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–µ–Ω–Ω—ã–π —á–∞—Ç _(–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—è)_\n"
        text += "/best –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö _(—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –í–ì [–í—Å, –ü–Ω] )_\n"
        # text += "/snow –≤—ã–∑–≤–∞—Ç—å –°–Ω–µ–≥—É—Ä–æ—á–∫—É! _(—Ç–æ–ª—å–∫–æ –≤ –í—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –í–ì)_\n"
    else:
        pass # stub for adding only non-admin help
    bot.send_message(userid, text, parse_mode="markdown")
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
    bot.delete_message(m.chat.id, m.message_id)

#
# Help guide for officer
# (private bot chat)
#
@bot.message_handler(commands=["officer"])
def show_help_officer(m):
    userid = m.from_user.id
    if hlp.IsUserAdmin(m.from_user.id):
        text =  ICON_OFFICER+" *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–µ–¥–µ–Ω–∏—é –±–æ—è –¥–ª—è –æ—Ñ–∏—Ü–µ—Ä–∞*\n" + \
                "\n_–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –≤ –≤–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ_\n"
        text += "\n0Ô∏è‚É£ *–î–æ –Ω–∞—á–∞–ª–∞ –í–ì*\n" + \
                "`@assassinsgwbot —á–µ–∫` - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì.\n" + \
                "+ _–õ—É—á—à–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ, –∞ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –±–æ–µ–º_\n"
        text += "\n1Ô∏è‚É£ *–ù–∞—á–∞–ª–æ –±–æ—è*\n" + \
                "`@assassinsgwbot –±–æ–π XX:XX –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π` - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –Ω–∞ –±–æ–π\n" + \
                "+ _–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ '"+ICON_ROLL+"', —á—Ç–æ–±—ã –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç_\n" + \
                "+ _–ö–æ–≥–¥–∞ –±–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è, –Ω–∞–∂–∞—Ç—å –Ω–∞ '"+ICON_START+"', —á—Ç–æ–±—ã –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –≤ –ª–∏—á–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤_\n" + \
                "+ _–ï—Å–ª–∏ –∫—Ç–æ-–Ω–∏–±—É–¥—å –æ–ø–æ–∑–¥–∞–µ—Ç –∫ –Ω–∞—á–∞–ª—É –∏ –æ—Ç–º–µ—Ç–∏—Ç—Å—è –ø–æ–∑–∂–µ, –≤ —á–∞—Ç –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_\n" + \
                "+ _–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ—è –Ω–∞–∂–∞—Ç—å –Ω–∞ '"+ICON_STOP+"', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–æ–π –∏ –≤—Å–µ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫–∏_\n"
        text += "\n2Ô∏è‚É£ *–ê—Ä—Å–µ–Ω–∞–ª –∏ —è—Ä–æ—Å—Ç—å*\n" + \
                "`@assassinsgwbot –∞—Ä—Å XX:XX` - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞ (—É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è —è—Ä–æ—Å—Ç–∏)\n" + \
                "+ _–û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–∏—è, –∫–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ –±–∏—Ç—å –∞—Ä—Å–µ–Ω–∞–ª_\n" + \
                "+ _–ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–æ—Å—ã –¥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ—Ç–∫–∏ –≤ —á–∞—Ç –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞)_\n" + \
                "+ _–ü—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–æ—Å—ã –≤ —á–∞—Ç –∏ –≤ –ª–∏—á–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —è—Ä–æ—Å—Ç–∏_\n"
        text += "\n3Ô∏è‚É£ *–ê—Ç–∞–∫–∞ –Ω–æ–º–µ—Ä–æ–≤*\n" + \
                "`@assassinsgwbot –Ω–æ–º–µ—Ä–∞ N` - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ N –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Å–∫—Ä–∏–Ω–∞–º \n" + \
                "`@assassinsgwbot –Ω–æ–º–µ—Ä–∞ X Y Z ...` - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∏–≥—Ä–µ\n" + \
                "+ _–°–∞–º–∏ —Å–∫—Ä–∏–Ω—ã –ø–æ—Å—ã–ª–∞—é—Ç—Å—è –≤ —á–∞—Ç –≤—Ä—É—á–Ω—É—é_\n" + \
                "+ _–í –∫–∞—á–µ—Å—Ç–≤–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –º–æ–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—ã –≤ –ª–∏—á–∫—É –±–æ—Ç–∞ –≤ –≤–∏–¥–µ –∞–ª—å–±–æ–º–∞, –∏ –æ–Ω –≤—ã–¥–∞—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –Ω–æ–º–µ—Ä–æ–≤_\n" + \
                "+ _–ö–Ω–æ–ø–∫–∏ '"+ICON_500+"' –∏ '"+ICON_1000+"' –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏_\n" + \
                "+ _–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ '"+ICON_1000+"' —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è_\n" + \
                "+ _–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è '–¥–æ–±–∏—Ç—å' –Ω–æ–º–µ—Ä–∞ –ø–æ –∏–≥—Ä–µ, –Ω–µ –±–æ–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–µ–∫ –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π_\n"
        text += "\n4Ô∏è‚É£ *–ü—Ä–æ—á–µ–µ*\n" + \
                "`@assassinsgwbot –∫—Ä–∏` - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –ø–æ –∫—Ä–∏\n" + \
                "+ _–ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ (–æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ —Ç–æ–ø–∞—Ö) –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –∫—Ä–∏ –æ—Å—Ç–∞–ª–æ—Å—å —É –±–æ–π—Ü–æ–≤_\n" + \
                "+ _–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞_\n"
    else:
        pass # stub for adding only non-admin help
    bot.send_message(userid, text, parse_mode="markdown")
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
    bot.delete_message(m.chat.id, m.message_id)

#
# Set war chat
# (chat command)
#
@bot.message_handler(commands=['warchat'])
def command_set_warchat(m):
    if hlp.IsInPrivateChat(m):
        hlp.SendHelpWrongChat(m.from_user.id, "/warchat", "–∑–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–µ–Ω–Ω—ã–π —á–∞—Ç", False)
        return
    bot.delete_message(m.chat.id, m.message_id)
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    # if common.warchat_id != None and common.warchat_id == m.chat.id:
    current = common.settings.GetSetting("bot_warchat")
    if current and current == m.chat.id:
        bot.send_message(m.from_user.id, ICON_CANCEL+" –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –≤–æ–µ–Ω–Ω—ã–π!")
    else:
        common.warchat_id = m.chat.id
        common.settings.SetSetting("bot_warchat", m.chat.id)
        log.info("war chat set: %d", common.warchat_id)
        bot.send_message(m.from_user.id, ICON_CHECK+" –í–æ–µ–Ω–Ω—ã–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!")
        aws_settings_backup()


#
# Set log chat
# (chat command)
#
@bot.message_handler(commands=['logchat'])
def command_set_logchat(m):
    if hlp.IsInPrivateChat(m):
        hlp.SendHelpWrongChat(m.from_user.id, "/logchat", "–∑–∞–ø–æ–º–Ω–∏—Ç—å —á–∞—Ç —Å–æ–±—ã—Ç–∏–π", False)
        return
    bot.delete_message(m.chat.id, m.message_id)
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    # if common.logchat_id != None and common.logchat_id == m.chat.id:
    current = common.settings.GetSetting("bot_logchat")
    if current and current == m.chat.id:
        bot.send_message(m.from_user.id, ICON_CANCEL+" –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∑–∞–¥–∞–Ω –∫–∞–∫ —á–∞—Ç —Å–æ–±—ã—Ç–∏–π!")
    else:
        common.logchat_id = m.chat.id
        common.settings.SetSetting("bot_logchat", m.chat.id)
        log.info("log chat set: %d", common.logchat_id)
        bot.send_message(m.from_user.id, ICON_CHECK+" –ß–∞—Ç —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!")
        aws_settings_backup()


#
# Set log chat
# (chat command)
#
@bot.message_handler(commands=['debugchat'])
def command_set_debugchat(m):
    if hlp.IsInPrivateChat(m):
        hlp.SendHelpWrongChat(m.from_user.id, "/debugchat", "–∑–∞–ø–æ–º–Ω–∏—Ç—å —á–∞—Ç –æ—Ç–ª–∞–¥–∫–∏", False)
        return
    bot.delete_message(m.chat.id, m.message_id)
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    # if common.logchat_id != None and common.logchat_id == m.chat.id:
    current = common.settings.GetSetting("bot_debugchat")
    if current and current == m.chat.id:
        bot.send_message(m.from_user.id, ICON_CANCEL+" –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∑–∞–¥–∞–Ω –∫–∞–∫ —á–∞—Ç –æ—Ç–ª–∞–¥–∫–∏!")
    else:
        common.debugchat_id = m.chat.id
        common.settings.SetSetting("bot_debugchat", m.chat.id)
        log.info("debug chat set: %d", common.debugchat_id)
        bot.send_message(m.from_user.id, ICON_CHECK+" –ß–∞—Ç –æ—Ç–ª–∞–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!")
        aws_settings_backup()


#
# Toggle debug mode
# (private bot chat)
#
@bot.message_handler(commands=['debug'])
def command_toggle_debug_mode(m):
    if not hlp.IsInPrivateChat(m):
        hlp.SendHelpWrongChat(m.from_user.id, "/debug", "–í–ö–õ/–í–´–ö–õ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", True)
        return
    bot.delete_message(m.chat.id, m.message_id)
    if not hlp.IsUserAdmin(m.from_user.id) or str(m.from_user.id) != common.ROOT_ADMIN[0]:
        hlp.SendHelpNonAdmin(m)
        return
    # switch mode
    common.DEBUG_MODE = not common.DEBUG_MODE
    bot.send_message(m.from_user.id, "üî® –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ *%s*!" % ("–í–ö–õ–Æ–ß–ï–ù" if common.DEBUG_MODE else "–û–¢–ö–õ–Æ–ß–ï–ù"), parse_mode="markdown").wait()
    if common.DEBUG_MODE:
        text  = "üõ∏ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —á–∞—Ç –æ—Ç–ª–∞–¥–∫–∏\n"
        text += "üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"
        text += "üìà –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –≤–µ–¥–µ—Ç—Å—è\n\n"
        text += "‚ÄºÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏"
        bot.send_message(m.from_user.id, text)
        # switch war chat and debug chat
        warchat_backup = common.warchat_id
        common.warchat_id = common.debugchat_id
        common.debugchat_id = warchat_backup
    else:
        # switch war chat and debug chat back
        warchat_backup = common.debugchat_id
        common.debugchat_id = common.warchat_id
        common.warchat_id = warchat_backup




#
# Start utility command
# (private bot chat)
#
@bot.message_handler(commands=['start'])
def command_start(m):
    # print("command_start")
    # print(m)
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/start", "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–µ", True)
        return
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    inline_error = m.text.replace("/start ", "")
    if inline_error != "":
        if inline_error == "existing_precheck":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì.\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n" % ICON_STOP) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –æ—à–∏–±–æ—á–Ω–æ - –∑–∞–≤–µ—Ä—à–∏—Ç–µ —á–µ–∫, " + \
                    "–∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)
        elif inline_error == "existing_battle":
            if not hlp.CanStartNewBattle():
                text =  "–¢–µ–∫—É—â–∏–π –±–æ–π: %0.2d:%0.2d.\n\n" % (*common.current_battle.GetTime(start=True),)
                text += ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å (%s) –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n" % ICON_STOP) + \
                         "–ï—Å–ª–∏ –±–æ–π –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –æ—à–∏–±–æ—á–Ω–æ - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ–π, " + \
                         "–∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
                bot.send_message(m.chat.id, text)
            else:
                hlp.SendHelpNoBattle(m.chat.id)
        elif inline_error == "existing_arsenal":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∂–µ—á—å (%s) –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) —Ç–µ–∫—É—â–∏–π.\n" % (ICON_RAGE, ICON_STOP)) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –∞—Ä—Å–∞ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ (–∏–ª–∏ —è—Ä–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –±–æ–µ) - " + \
                    "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)
        elif inline_error == "existing_numbers":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç–∏—á—å —Ö–æ—Ç—è –±—ã '500' –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) –µ–≥–æ.\n" % ICON_STOP) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ (–∏–ª–∏ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ö–æ—Ç—è –±—ã '500') - " + \
                    "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
        elif inline_error == "existing_crystals":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –ø–æ –∫—Ä–∏\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –ø–æ –∫—Ä–∏ –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å (%s) –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n" % ICON_STOP) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ - –∑–∞–≤–µ—Ä—à–∏—Ç–µ —á–µ–∫, " + \
                    "–∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)


#
# Start pending battle
# (private bot chat)
#
@bot.message_handler(commands=['bstart'])
def command_battle_start(m):
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/bstart", "–Ω–∞—á–∞—Ç—å –±–æ–π", True)
        return
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    if not hlp.CanStartNewBattle():
        if not common.current_battle.is_started:
            text = "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π [%0.2d:%0.2d]?" % (*common.current_battle.GetTime(start=True),)
            bot.send_message(m.chat.id, text, reply_markup=kb.KEYBOARD_START)
        else:
            bot.send_message(m.chat.id, "–ë–æ–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    else:
        hlp.SendHelpNoBattle(m.chat.id)

#
# Stop current battle
# (private bot chat)
#
@bot.message_handler(commands=['bstop'])
def command_battle_stop(m):
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/bstop", "–∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±–æ–π", True)
        return
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    if not hlp.CanStartNewBattle():
        if not common.current_battle.is_postponed:
            text = "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π [%0.2d:%0.2d]?" % (*common.current_battle.GetTime(start=True),)
            bot.send_message(m.chat.id, text, reply_markup=kb.KEYBOARD_STOP)
        else:
            bot.send_message(m.chat.id, "–ë–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
    else:
        hlp.SendHelpNoBattle(m.chat.id)

#
# Get check list for current battle
# (private bot chat)
#
@bot.message_handler(commands=['checklist'])
def command_battle_checklist(m):
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/checklist", "–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –±–æ—é", True)
        return
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    if not hlp.CanStartNewBattle():
        checklist = ""
        for user in common.current_battle.GetActiveUsersNames():
            checklist += user + "\n"
        bot.send_message(m.chat.id, checklist)
    else:
        hlp.SendHelpNoBattle(m.chat.id)

#
# Update bot admins list
# (war chat where admins reside)
#
@bot.message_handler(commands=["setadmins"])
def setup_admins(m):
    # print("setup_admins")
    # print(m)
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to update admins list" % (*user,))
    if not hlp.IsUserAdmin(m.from_user.id):
        log.error("Failed (not an admin)")
        hlp.SendHelpNonAdmin(m)
        return
    if hlp.IsInPrivateChat(m):
        log.error("Failed (in private chat)")
        hlp.SendHelpWrongChat(user[0], "/setadmins", "–æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤", False)
        return
    is_chat_admin = False
    chat_admins = bot.get_chat_administrators(m.chat.id).wait()
    for admin in chat_admins:
        if admin.user.id == user[0]:
            is_chat_admin = True
            break
    if not is_chat_admin:
        log.error("Failed (not a chat admin)")
        hlp.SendHelpNonAdmin(m)
        return
    admins = {}
    for admin in chat_admins:
        if str(admin.user.id) != common.ROOT_ADMIN[0] and admin.user.username != common.BOT_USERNAME:
            name_record = admin.user.first_name
            if admin.user.username != None:
                name_record += " (" + admin.user.username + ")"
            admins[str(admin.user.id)] = name_record
    common.aws_admins_backup(newlist=admins)
    bot.send_message(m.chat.id, ICON_OFFICER+" –°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
    log.info("Admins list updated")

#
# Manage admins
# (private bot chat)
#
@bot.message_handler(commands=["admins"])
def manage_admins(m):
    # print("manage_admins")
    # print(m)
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to check admins list" % (*user,))
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(user[0], "/admins", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤", True)
        return
    text =  "–°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤:\n\n"
    text += "üëÅ %s _[–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞]_\n" % common.ROOT_ADMIN[1]
    for admin in common.admins:
        if common.BOT_USERNAME not in admin or admin != common.ROOT_ADMIN[1]:
            if str(user[0]) == common.ROOT_ADMIN[0]: # show admins IDs for root admin
                text += ICON_MEMBER+" %s _(ID=%s)_\n" % (common.admins[admin], admin)
            else:
                text += (ICON_MEMBER+" %s\n" % common.admins[admin])
    bot.send_message(user[0], text, parse_mode="markdown")
    return

#
# Emergency reset all checks query
# (private bot chat)
#
@bot.message_handler(commands=['reset'])
def command_reset(m):
    if not hlp.IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        hlp.SendHelpWrongChat(m.from_user.id, "/reset", "–≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–æ—Ç–∞", True)
        return
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to reset bot" % (*user,))
    bot.send_message(m.chat.id, "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å?", reply_markup=kb.KEYBOARD_RESET)

#
# Emergency reset all checks processing
# (private bot chat)
#
@bot.message_handler(func=lambda message: message.text in kb.RESET_CONTROL_OPTIONS)
def hard_reset(m):
    # it is a bug actually to use privately generated keyboard buttons outside private bot chat
    # should not happen in any case, but who knows?
    if not hlp.IsInPrivateChat(m):
        return
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    markup = types.ReplyKeyboardRemove(selective=False)
    if m.text == kb.RESET_CONTROL_OPTIONS[1]: # cancel
        bot.send_message(m.from_user.id, "‚õîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        log.debug("Reset calcelled")
        return
    if not hlp.CanStartNewPrecheck(): # should hit 'end' to start another
        common.current_precheck.DoEndPrecheck()
        bot.edit_message_text(common.current_precheck.GetText(), inline_message_id=common.current_precheck.check_id,
                              parse_mode="markdown")
        common.current_precheck = None
    if common.current_cryscheck: # postponed is not a condition that check ended
        common.current_cryscheck.DoEndCryscheck()
        bot.edit_message_text(common.current_cryscheck.GetText(), inline_message_id=common.current_cryscheck.check_id,
                              parse_mode="markdown")
        common.current_cryscheck = None
    reset_battlechecks(m)
    try:
        bot.send_message(m.from_user.id, ICON_CHECK+" –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω", reply_markup=markup)
    except: # no need to send private message if checks have been reset via battle control
        pass
    log.debug("Reset successful")


#
# Battle control
# (private bot chat)
#
@bot.message_handler(func=lambda message: message.text in kb.CHECK_CONTROL_OPTIONS_PRIVATE)
def battle_control(m):
    # it is a bug actually to use privately generated keyboard buttons outside private bot chat
    # should not happen in any case, but who knows?
    if not hlp.IsInPrivateChat(m):
        return
    if not hlp.IsUserAdmin(m.from_user.id):
        hlp.SendHelpNonAdmin(m)
        return
    markup = types.ReplyKeyboardRemove(selective=False)
    if m.text == kb.buttonStartPrivate.text:
        common.current_battle.DoStartBattle()
        bot.edit_message_text(common.current_battle.GetText(), inline_message_id=common.current_battle.check_id, 
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_LATE)
        bot.send_message(m.chat.id, "‚úÖ –ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", reply_markup=markup)
        common.current_battle.BattleStartNotifyActiveUsers()
    elif m.text == kb.buttonStopPrivate.text:
        reset_battlechecks(m)
        bot.send_message(m.chat.id, "‚ùé –ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=markup)
    else: # –û—Ç–º–µ–Ω–∞
        bot.send_message(m.chat.id, "‚õîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)


#
# Handler updating internal chat members list
# (add new user)
#
@bot.message_handler(func=lambda m: True, content_types=['new_chat_participant'])
def on_user_joins(m):
    id = str(m.new_chat_participant.id)
    if id not in common.WarChatMembers.keys():
        common.WarChatMembers[id] = { "blame_cnt": 0 }
    common.WarChatMembers[id]["is_active"] = True
    common.aws_warchat_members_backup()



#
# Handler updating internal chat members list
# (disactivate left user)
#
@bot.message_handler(func=lambda m: True, content_types=['left_chat_participant'])
def on_user_leaves(m):
    id = str(m.left_chat_participant.id)
    if id in common.WarChatMembers.keys():
        del common.WarChatMembers[id]
        # TODO how to fix leave-join abuse? this does not work if user was actually kicked from guild
        # common.WarChatMembers[id]["is_active"] = False
        common.aws_warchat_members_backup()


#
# Blame command
# (chat command)
# NOTE: blame list is not updated for past GW if this command was not called!
#
@bot.message_handler(commands=["gwblame"])
def blame_for_gw(m):
    # print("blame_for_gw")
    # print(m)
    user = User(m.from_user.id, m.from_user.first_name, m.from_user.username)
    log.debug("User %s is trying to use /gwblame" % user)
    if not hlp.IsUserAdmin(user._id):
        log.error("Failed (not an admin)")
        hlp.SendHelpNonAdmin(m)
        return
    if hlp.IsInPrivateChat(m):
        log.error("Failed (in private chat)")
        hlp.SendHelpWrongChat(user._id, "/gwblame", "–ø–æ—Ä—É–≥–∞—Ç—å —Ç—É–Ω–µ—è–¥—Ü–µ–≤ –∑–∞ –í–ì", False)
        return
    # allow only once per week
    elapsed = int((datetime.datetime.now() - common.gwblame_timestamp).total_seconds())
    if elapsed < 1*60*60*24*6:
        common.bot.send_message(user._id, "–ü–æ—Ä—É–≥–∞—Ç—å —Ç—É–Ω–µ—è–¥—Ü–µ–≤ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é!")
        log.error("Failed: wrong time")
        return

    users_to_blame = {} # {userid: {blame_desc}}
    users_to_kick  = [] # [userid]
    users_checked  = [user._id for user in common.current_precheck.daily.keys()]
    users_bailed   = [user._id for user in common.current_precheck.cancels.keys()]
    users_scored   = [user._id for user in common.statistics.statistics[0].stats.keys()] 
    # form list of users to blame
    for user in common.WarChatMembers.keys():
        blame_desc = { "is_going": False,
                       "is_scored": False
                     }
        # WarChatMembers user -> checked in preckeck as not-going? -> dont blame
        if int(user) in users_bailed:
            continue
        elif int(user) in users_checked:
            blame_desc["is_going"] = True
        # WarChatMembers user -> in any statistics? -> dont blame
        # TODO add option to check for minimal scores
        if int(user) in users_scored:
            continue
        else:
            blame_desc["is_scored"] = False
        users_to_blame[str(user)] = blame_desc
    # set text for blame message
    common.bot.send_chat_action(common.warchat_id, "typing")
    text = "ü¶û *–°–ø–∏—Å–æ–∫ —Ç—É–Ω–µ—è–¥—Ü–µ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –í–ì*:\n\n"
    if len(users_to_blame) > 0:
        for user in users_to_blame:
            user_o = bot.get_chat_member(common.warchat_id, int(user)).wait()
            print(user_o)
            user_string = User(user_o.user.id, user_o.user.first_name, user_o.user.username).GetString()
            text += ICON_MEMBER+" %s" % user_string
            text += " " + ICON_LIST*(not users_to_blame[user]["is_going"])
            text += " " + ICON_STAR*(not users_to_blame[user]["is_scored"])
            text += "\n"
            common.WarChatMembers[user]["blame_cnt"] = common.WarChatMembers[user]["blame_cnt"] + 1
    else:
        text += "_(—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)_"
    # hide command from chat history
    bot.delete_message(m.chat.id, m.message_id)
    bot.send_message(common.warchat_id, text, parse_mode="markdown")
    # imitate typing
    common.bot.send_chat_action(common.warchat_id, "typing").wait()
    time.sleep(3)
    # form users list to suggest kick
    for user in common.WarChatMembers.keys():
        if common.WarChatMembers[user]["blame_cnt"] > 2:
            users_to_kick.append(int(user))
    # set text to kick message
    if len(users_to_kick) > 0:
        text = "‚ò†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–∏–∫:\n\n"
        for user in users_to_kick:
            user_o = bot.get_chat_member(common.warchat_id, user).wait()
            print(user_o)
            user_string = User(user_o.user.id, user_o.user.first_name, user_o.user.username).GetString()
            text += ICON_MEMBER+" %s _(%d)_\n" % (user_string, common.WarChatMembers[str(user)]["blame_cnt"])
        bot.send_message(common.warchat_id, text, parse_mode="markdown")
    common.gwblame_timestamp = datetime.datetime.now()
    common.aws_warchat_members_backup()

#
# Forgive command
# (chat command)
#
@bot.message_handler(commands=["gwforgive"])
def forgive_for_gw(m):
    # print("forgive_for_gw")
    # print(m)
    user = User(m.from_user.id, m.from_user.first_name, m.from_user.username)
    log.debug("User %s is trying to use /gwforgive" % user)
    if not hlp.IsUserAdmin(user._id):
        log.error("Failed (not an admin)")
        hlp.SendHelpNonAdmin(m)
        return
    if hlp.IsInPrivateChat(m):
        log.error("Failed (in private chat)")
        hlp.SendHelpWrongChat(user._id, "/gwforgive", "–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç—É–Ω–µ—è–¥—Ü–µ–≤ –∑–∞ –í–ì", False)
        return
    for user in common.WarChatMembers.keys():
        common.WarChatMembers[user]["blame_cnt"] = 0
    # hide command from chat history
    bot.delete_message(m.chat.id, m.message_id)
    bot.send_message(m.chat.id, "üôè –í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –ø—Ä–æ—â–µ–Ω–æ —Ç—É–Ω–µ—è–¥—Å—Ç–≤–æ –Ω–∞ –í–ì!")


#
# Call for fun mode 'Snow White'
# (war chat command)
#
# @bot.message_handler(commands=['snow'])
# def command_snow(m):
#     # print(m)
#     user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
#     log.debug("User %d (%s %s) is trying to call Snow!" % (*user,))
#     if hlp.IsInPrivateChat(m):
#         hlp.SendHelpWrongChat(m.from_user.id, "/snow", "–≤—ã–∑–≤–∞—Ç—å –°–Ω–µ–≥—É—Ä–æ—á–∫—É", False)
#         return
#     bot.delete_message(m.chat.id, m.message_id)
#     if not hlp.IsUserAdmin(m.from_user.id):
#         log.error("Failed: not an admin")
#         hlp.SendHelpNonAdmin(m)
#         return
#     if not hlp.IsGWEndingTime():
#         bot.send_message(user[0], "–û–π! –í—ã–∑–≤–∞—Ç—å –°–Ω–µ–≥—É—Ä–æ—á–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –í–ì!")
#         log.error("Failed: wrong time")
#         return
    
#     if common.current_snowwhite == {}:
#         common.current_snowwhite["message"] = bot.send_message(m.chat.id,
#                                              ICON_SNOW+" –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!",
#                                              reply_markup=kb.KEYBOARD_SNOWWHITE).wait()
#         common.current_snowwhite["praised"] = []
#         log.info("Snow White called!")
#     else:
#         log.error("Snow White is already here!")

#
# Snow White control
# (war chat keyboard action)
#
# @bot.callback_query_handler(func=lambda call: call.data == cb.SNOW_PRAISE_CALLBACK)
# def snow_control(call):
#     # print("snow_control")
#     # print(call)
#     user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
#     log.debug("User %d (%s %s) is cheering Snow White" % (*user,))
    
#     if common.current_snowwhite != {}:
#         if not user[0] in common.current_snowwhite["praised"]:
#             log.debug("Praised")
#             bot.send_message(call.message.chat.id, hlp.SnowGeneratePraise(user),
#                              parse_mode="markdown", disable_notification=True)
#             common.current_snowwhite["praised"].append(user[0])
#             bot.answer_callback_query(call.id)
#         else:
#             log.error("Failed: already praised")
#             bot.answer_callback_query(call.id, "–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –°–Ω–µ–≥—É—Ä–æ—á–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!")
#         if not hlp.IsGWEndingTime():
#             log.info("Snow White overtime, ending")
#             bot.delete_message(common.current_snowwhite["message"].chat.id, common.current_snowwhite["message"].message_id)
#             bot.send_message(call.message.chat.id,
#                              ICON_SNOW+" –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å–ª–µ–¥—é—É—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ!",
#                              disable_notification=True)
#             common.current_snowwhite = {}
#         return
#     log.error("Bug! User pressed Snow White keyboard button with to current_snowwhite!")
#     bot.answer_callback_query(call.id)


#
# Test command
# (debug command)
#
@bot.message_handler(commands=["test"])
def debug_test_command(m):
    log.info("debug_test_command")
    # print(m)
    if common.DEBUG_MODE:
        import tempfile
        log.debug("Debug mode is ON, processing...")
        user = User(m.from_user.id, m.from_user.first_name, m.from_user.username)
        text = "User %s sent /test command." % user
        temp_file = tempfile.NamedTemporaryFile(mode="w", delete=False, suffix='.txt')
        # write whole message object into file (change on needs)
        temp_file.write(str(m))
        temp_file.close()
        with open(temp_file.name, "r") as tfile:
            bot.send_document(common.warchat_id, tfile, caption=text, disable_notification=True).wait()
            tfile.close()
        os.remove(temp_file.name)


def AWSRestore():
    aws_settings_restore()
    common.aws_admins_restore()
    common.aws_warchat_members_restore()
    aws_stat_restore()
    aws_precheck_restore()
    aws_crystals_restore()
    # attempt to restore battle checks (use class names here!)
    hlp.AWSCheckRestore("Battle")
    hlp.AWSCheckRestore("Arsenal")
    hlp.AWSCheckRestore("NumbersCheck")


if __name__ == '__main__':
    if "HEROKU" in list(os.environ.keys()):
        log.warning("Running on Heroku, setup webhook")
        server = Flask(__name__)
        AWSRestore()
        bot.send_message(int(common.ROOT_ADMIN[0]), "üîß –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        @server.route('/bot' + common.TOKEN, methods=['POST'])
        def getMessage():
            bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
            return "!", 200

        @server.route("/")
        def webhook():
            time.sleep(1)
            bot.set_webhook(url='https://' + common.BOT_USERNAME + '.herokuapp.com/bot' + common.TOKEN)
            return "?", 200
        server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 80)))
    else:
        log.warning("Running locally, start polling")
        bot.remove_webhook()
        AWSRestore()
        bot.send_message(int(common.ROOT_ADMIN[0]), "üîß –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        bot.polling(none_stop=True, interval=0, timeout=20)
