#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2019 Gerasimov Alexander <samik.mechanic@gmail.com>
#
# @assassinsgwbot
#

import telebot, datetime, re, json, sys, os
from icons import *
from battle import Battle
from warprecheck import WarPreCheck
from arsenal import Arsenal
from numberscheck import NumbersCheck
from commands import COMMANDS
from telebot import types
import keyboards as kb
import callbacks as cb
import helpers as hlp
from logger import get_logger
from flask import Flask, request

log = get_logger("bot")

DOUBLESHOP_TIME = [4, [17, 58], [18, 13]]
DOUBLESHOP_TIME_CALLED = False

# setup proxy if asked
if len(sys.argv) > 1:
    if sys.argv[1] == '1':
        telebot.apihelper.proxy = {'http':'http://73.55.76.54:8080'}

if "HEROKU" in list(os.environ.keys()):
    TOKEN = os.environ['TOKEN']
    log.info("[HEROKU] read token: '%s'" % TOKEN)
else:
    with open("TOKEN", "r") as tfile: # local run
        TOKEN = tfile.readline().strip('\n')
        log.info("[LOCAL] read token: '%s'" % TOKEN)
        tfile.close()

bot = telebot.TeleBot(TOKEN)

BOT_USERNAME = "assassinsgwbot"
ROOT_ADMIN = [] # creator
admins = {}

warchat_id       = None
current_battle   = None
current_precheck = None
current_arscheck = None
current_numcheck = None
rage_time_workaround = []

def CanStartNewPrecheck():
    res = current_precheck == None
    if not res:
        res = current_precheck.is_postponed
    return res

def CanStartNewBattle():
    res = current_battle == None
    if not res:
        res = current_battle.is_postponed
    return res

def CanStartNewArs():
    res = current_arscheck == None
    if not res:
        res = current_arscheck.is_fired
    return res

def CanStartNewNumbers():
    res = current_numcheck == None
    if not res:
        res = current_numcheck.is_postponed
    return res

def IsUserAdmin(message):
    if str(message.from_user.id) in admins or \
       str(message.from_user.id) == ROOT_ADMIN[0]:
        return True
    else:
        return False

def IsInPrivateChat(message):
    if message.chat.id == message.from_user.id:
        return True
    return False

def SendHelpNonAdmin(message):
    text =  "–ú–Ω–æ–π –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–µ—Ä—ã –≥–∏–ª—å–¥–∏–∏.\n"
    text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–¥–Ω–æ–º—É –∏–∑ –æ—Ñ–∏—Ü–µ—Ä–æ–≤ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏:\n\n"
    for admin in admins:
        text += "[%s](tg://user?id=%s)\n" % (admins[admin], admin)
    bot.send_message(message.from_user.id, text, parse_mode="markdown")

#
# Manage admins list through file at start
#
# load initial list
with open("ADMINS", "r") as f:
    admins_list = json.load(f)
    ROOT_ADMIN = admins_list[0]
    admins = admins_list[1]
    f.close()
    print("Load root admin: ", ROOT_ADMIN)
    print("Load admins list: ", admins)

# save edited list
def SaveAdminsList():
    admins_list = [ROOT_ADMIN, admins]
    with open("ADMINS", "w") as f:
        json.dump(admins_list, f)
        f.close()
    print("Saved admins list: ", admins_list)

#####################
# Callback handlers #
#####################

#
# Chosen inline result handler
#
@bot.chosen_inline_handler(lambda result: True)
def chosen_inline_handler(r):
    # print("chosen_inline_handler")
    # print(r)
    user = [r.from_user.id, r.from_user.username, r.from_user.first_name]
    if r.result_id == '0': # battle check
        global current_battle
        log.debug("User %d (%s %s) created battle check (%s)" % (*user, r.query))
        times = hlp.IsCheckTimeQuery(r)[1]
        current_battle = Battle(times[0], times[1])
        current_battle.SetMessageID(r.inline_message_id)
        bot.edit_message_text(current_battle.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_CHECK)
    elif r.result_id == '1': # pre-check
        global current_precheck
        log.debug("User %d (%s %s) created pre-check" % (*user,))
        current_precheck = WarPreCheck()
        current_precheck.SetMessageID(r.inline_message_id)
        bot.edit_message_text(current_precheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_PRECHECK)
    elif r.result_id == '3': # ars check
        global current_arscheck
        log.debug("User %d (%s %s) created arsenal check" % (*user,))
        current_arscheck = Arsenal()
        current_arscheck.SetMessageID(r.inline_message_id)
        current_arscheck.SetRage(rage_time_workaround)
        bot.edit_message_text(current_arscheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_ARS)
    elif r.result_id == '4': # numbers check
        global current_numcheck
        res, numbers = hlp.IsNumbersQuery(r)
        if len(numbers) == 1:
            log.debug("User %d (%s %s) created screens numbers check (%s)" % (*user, numbers[0]))
            current_numcheck = NumbersCheck(int(numbers[0]))
            current_numcheck.SetMessageID(r.inline_message_id)
        else:
            log.debug("User %d (%s %s) created in-game numbers check (%s)" % (*user, ' '.join(str(num) for num in numbers)))
            current_numcheck = NumbersCheck(len(numbers), ingame=True, ingame_nums=numbers)
            current_numcheck.SetMessageID(r.inline_message_id)
        bot.edit_message_text(current_numcheck.GetText(), inline_message_id=r.inline_message_id,
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_NUMBERS)

#
# Pre-check actions
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data in kb.PRECHECK_OPTIONS)
def precheck_check_user(call):
    # print("precheck_check_user")
    # print(call)
    message_id = call.inline_message_id
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    userChoice = call.data
    log.debug("User %d (%s %s) is trying to vote for pre-check (%s)" % (*user, userChoice.replace(cb.PRECHECK_CALLBACK_PREFIX, "")))
    if current_precheck:
        if message_id == current_precheck.check_id:
            ret = current_precheck.CheckUser(user, userChoice)
            if (ret):
                bot.edit_message_text(current_precheck.GetText(), inline_message_id=message_id, 
                                    parse_mode="markdown", reply_markup=kb.KEYBOARD_PRECHECK)
                bot.answer_callback_query(call.id, current_precheck.GetVotedText(user, userChoice))
            else:
                log.error("Failed")
                bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (%s)" % userChoice.replace(cb.PRECHECK_CALLBACK_PREFIX, ""))
            return
    log.error("Pre-check not found!")
    bot.answer_callback_query(call.id)

#
# Pre-check control
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data in kb.PRECHECK_CONTROL_OPTIONS)
def precheck_control(call):
    # print("precheck_control")
    # print(call)
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    log.debug("User %d (%s %s) is trying to control pre-check" % (*user,))
    if not IsUserAdmin(call):
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–∫–æ–º!")
        log.error("Failed (not an admin)")
        return
    userChoice = call.data
    if userChoice == kb.PRECHECK_CONTROL_OPTIONS[0]: # stop
        current_precheck.DoEndPrecheck()
        bot.edit_message_text(current_precheck.GetText(), inline_message_id=current_precheck.check_id, 
                              parse_mode="markdown")
        bot.answer_callback_query(call.id, "üèÅ –ß–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return
    log.error("Pre-check not found!", "–ù–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫ –í–ì! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")

#
# GW pre-check creation
# (war chat inline query)
#
@bot.inline_handler(lambda query: query.query == COMMANDS["precheck"])
def precheck_query_inline(q):
    # print("precheck_query_inline")
    # print(q)
    user = [q.from_user.id, q.from_user.username, q.from_user.first_name]
    log.debug("User %d (%s %s) is trying to create pre-check" % (*user,))
    if not IsUserAdmin(q): # non-admins cannot post votes
        log.error("Failed (not an admin)")
        SendHelpNonAdmin(q)
        bot.answer_callback_query(q.id)
        return
    if CanStartNewPrecheck():
        res = types.InlineQueryResultArticle('1',
                                            title='–°–æ–∑–¥–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì',
                                            description='üóì‚úÖüí§‚ùå',
                                            input_message_content=types.InputTextMessageContent("PRECHECK PLACEHOLDER", parse_mode="markdown"),
                                            thumb_url="https://i.ibb.co/G79HtRG/precheck.png",
                                            reply_markup=kb.KEYBOARD_PRECHECK)
        bot.answer_inline_query(q.id, [res], is_personal=True, cache_time=2)
    else:
        log.error("Trying to setup another pre-check while current is not finished")
        error_text = "–£–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫"
        bot.answer_inline_query(q.id, [], is_personal=True, cache_time=2,
                                switch_pm_text=error_text, switch_pm_parameter="existing_precheck")

#
# Numbers progress
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data in kb.NUMBERS_OPTIONS)
def numbers_check_user(call):
    # print("numbers_check_user")
    # print(call)
    message_id = call.inline_message_id
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    log.debug("User %d (%s %s) is trying to vote for numbers (%s)" % (*user, call.data.replace(cb.NUMBERS_CALLBACK_PREFIX, "")))
    if current_numcheck:
        if message_id == current_numcheck.check_id:
            ret = current_numcheck.CheckUser(user, call.data)
            if (ret):
                if not current_numcheck.is_1000: # if reached 1000 - no need to continue numbers check
                    bot.edit_message_text(current_numcheck.GetText(), inline_message_id=message_id, 
                                        parse_mode="markdown", reply_markup=kb.KEYBOARD_NUMBERS)
                else:
                    current_numcheck.DoEndCheck()
                    bot.edit_message_text(current_numcheck.GetText(), inline_message_id=message_id, 
                                        parse_mode="markdown")
            bot.answer_callback_query(call.id)
            return
    log.error("Numbers check not found!")
    bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")

#
# Numbers check control
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data in kb.NUMBERS_CONTROL_OPTIONS)
def numbers_control(call):
    # print("numbers_control")
    # print(call)
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    log.debug("User %d (%s %s) is trying to control numbers check" % (*user,))
    if not IsUserAdmin(call):
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–∫–æ–º –Ω–æ–º–µ—Ä–æ–≤!")
        log.error("Failed (not an admin)")
        return
    userChoice = call.data
    if current_numcheck:
        if userChoice == kb.NUMBERS_CONTROL_OPTIONS[0]: # make 500
            current_numcheck.Do500()
            bot.edit_message_text(current_numcheck.GetText(),
                                  inline_message_id=current_numcheck.check_id,
                                  parse_mode="markdown", reply_markup=kb.KEYBOARD_NUMBERS)
            bot.answer_callback_query(call.id, "–û—Ç–º–µ—á–µ–Ω–æ "+ICON_500)
            return
        elif userChoice == kb.NUMBERS_CONTROL_OPTIONS[1]: # make 1000
            current_numcheck.Do1000()
            bot.edit_message_text(current_numcheck.GetText(),
                                  inline_message_id=current_numcheck.check_id,
                                  parse_mode="markdown")
            bot.answer_callback_query(call.id, "–û—Ç–º–µ—á–µ–Ω–æ "+ICON_1000)
            return
        elif userChoice == kb.NUMBERS_CONTROL_OPTIONS[2]: # stop
            current_numcheck.DoEndCheck()
            bot.edit_message_text(current_numcheck.GetText(),
                                  inline_message_id=current_numcheck.check_id,
                                  parse_mode="markdown")
            bot.answer_callback_query(call.id, "üèÅ –ß–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return
        else:
            log.error("invalid action!")
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–∞—è –∫–æ–º–∞–Ω–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞")
    log.error("Numbers check not found!")
    bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")

#
# Numbers check creation
# (war chat inline query)
#
@bot.inline_handler(lambda query: query.query[:len(COMMANDS["numbers"])] == COMMANDS["numbers"])
def numbers_query_inline(q):
    # print("numbers_query_inline")
    # print(q)
    user = [q.from_user.id, q.from_user.username, q.from_user.first_name]
    log.debug("User %d (%s %s) is trying to create numbers check" % (*user,))
    if not IsUserAdmin(q): # non-admins cannot post votes
        log.error("Failed (not an admin)")
        SendHelpNonAdmin(q)
        bot.answer_callback_query(q.id)
        return
    if CanStartNewBattle():
        log.error("Trying to setup numbers check with no current battle")
        error_text = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π"
        bot.answer_inline_query(q.id, [], is_personal=True, cache_time=2,
                                switch_pm_text=error_text, switch_pm_parameter="existing_battle")
        return
    res, numbers = hlp.IsNumbersQuery(q)
    if res:
        if CanStartNewNumbers():
            text = '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–æ–º–µ—Ä–æ–≤'
            if len(numbers) == 1:
                text2 = '–ø–æ —Å–∫—Ä–∏–Ω–∞–º (%s)' % numbers[0]
                kb.SetupNumbersKeyboard(count=int(numbers[0]))
            else:
                text2 = '–ø–æ –∏–≥—Ä–µ (%s)' % ' '.join(str(num) for num in numbers)
                kb.SetupNumbersKeyboard(ingame_nums=numbers)
            res = types.InlineQueryResultArticle('4',
                                                 title=text,
                                                 description=text2,
                                                 input_message_content=types.InputTextMessageContent("NUMBERS PLACEHOLDER", parse_mode="markdown"),
                                                 thumb_url="https://i.ibb.co/JRRMLjv/numbers.png",
                                                 reply_markup=kb.KEYBOARD_NUMBERS
                                                 )
            bot.answer_inline_query(q.id, [res], is_personal=True, cache_time=2)
        elif not CanStartNewNumbers():
            log.error("Trying to setup another numbers check while current has not reached 500/1000")
            error_text = "–£–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤"
            bot.answer_inline_query(q.id, [], is_personal=True, cache_time=2,
                                    switch_pm_text=error_text, switch_pm_parameter="existing_numbers")
    else:
        log.error("Failed (invalid query)")
        error_text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"
        bot.answer_inline_query(q.id, [], is_personal=True, cache_time=2,
                                switch_pm_text=error_text, switch_pm_parameter="existing_numbers")

#
# Battle check
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data in kb.CHECK_OPTIONS)
def battle_check_user(call):
    # print("battle_check_user")
    # print(call)
    message_id = call.inline_message_id
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    userChoice = call.data
    log.debug("User %d (%s %s) is trying to vote for battle (%s)" % (*user, userChoice.replace(cb.CHECK_CALLBACK_PREFIX, "")))
    if current_battle:
        if message_id == current_battle.check_id:
            ret = current_battle.CheckUser(user, userChoice)
            if (ret):
                markup = kb.KEYBOARD_CHECK
                if current_battle.is_rolling:
                    markup = kb.KEYBOARD_CHECK_ROLLED
                elif current_battle.is_started:
                    markup = kb.KEYBOARD_LATE
                bot.edit_message_text(current_battle.GetText(), inline_message_id=message_id, 
                                    parse_mode="markdown", reply_markup=markup)
                bot.answer_callback_query(call.id, current_battle.GetVotedText(userChoice))
                if warchat_id:
                    if userChoice == cb.CHECK_LATE_CALLBACK:
                        text = ICON_LATE + " [%s (%s)](tg://user?id=%d) –ü—Ä–∏—à–µ–ª –Ω–∞ –±–æ–π!\n" % (user[1], user[2], user[0])
                        bot.send_message(warchat_id, text, parse_mode="markdown", disable_notification=True)
                        log.debug("Battle user late notification posted")
                else:
                    log.error("War chat_id is not set, cannot post late notification!")
            else:
                log.error("Failed")
                bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (%s)" % userChoice.replace(cb.CHECK_CALLBACK_PREFIX, ""))
            return
    log.error("Battle not found!")
    bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫ –±–æ—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")

#
# Battle control
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data in kb.CHECK_CONTROL_OPTIONS)
def battle_control(call):
    # print("battle_control")
    # print(call)
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    log.debug("User %d (%s %s) is trying to control battle" % (*user,))
    if not IsUserAdmin(call):
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ–µ–º!")
        log.error("Failed (not an admin)")
        return
    userChoice = call.data
    if current_battle:
        notification_text = ""
        if userChoice == kb.CHECK_CONTROL_OPTIONS[0]: # roll
            current_battle.DoRollBattle()
            notification_text = ICON_ROLL+" –ö—Ä—É—Ç–∏—Ç"
            KEYBOARD_CHECK_CURRENT = kb.KEYBOARD_CHECK_ROLLED
            bot.edit_message_text(current_battle.GetText(), inline_message_id=current_battle.check_id,
                                  parse_mode="markdown", reply_markup=kb.KEYBOARD_CHECK_ROLLED)
            bot.answer_callback_query(call.id, notification_text)
            current_battle.BattleRollNotifyActiveUsers(bot)
        elif userChoice == kb.CHECK_CONTROL_OPTIONS[1]: # start
            current_battle.DoStartBattle()
            notification_text = ICON_SWORDS+" –ë–æ–π –∑–∞–ø—É—â–µ–Ω"
            KEYBOARD_CHECK_CURRENT = kb.KEYBOARD_LATE
            bot.edit_message_text(current_battle.GetText(), inline_message_id=current_battle.check_id,
                                  parse_mode="markdown", reply_markup=kb.KEYBOARD_LATE)
            bot.answer_callback_query(call.id, notification_text)
            current_battle.BattleStartNotifyActiveUsers(bot)
        elif userChoice == kb.CHECK_CONTROL_OPTIONS[2]: # stop
            reset_control(call)
            notification_text = ICON_FINISH+" –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω"
            bot.answer_callback_query(call.id, notification_text)
        global warchat_id
        if warchat_id:
            notification = bot.send_message(warchat_id, notification_text, disable_notification=False)
            if userChoice != kb.CHECK_CONTROL_OPTIONS[2]: # stop
                bot.pin_chat_message(notification.chat.id, notification.message_id, disable_notification=False)
            else:
                bot.unpin_chat_message(warchat_id)
            log.debug("Battle status notification posted")
        else:
            log.error("War chat_id is not set, cannot post battle status notification!")
        return
    log.error("Battle not found!")
    bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫ –±–æ—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")

#
# Battle check creation
# (war chat inline query)
#
@bot.inline_handler(lambda query: hlp.IsCheckTimeQuery(query)[0])
def battle_query_inline(q):
    # print("battle_query_inline")
    # print(q)
    user = [q.from_user.id, q.from_user.username, q.from_user.first_name]
    log.debug("User %d (%s %s) is trying to create battle check" % (*user,))
    if not IsUserAdmin(q): # non-admins cannot post votes
        log.error("Failed (not an admin)")
        SendHelpNonAdmin(q)
        bot.answer_callback_query(q.id)
        return
    times = hlp.IsCheckTimeQuery(q)[1]
    if CanStartNewBattle():
        res = types.InlineQueryResultArticle('0',
                                            title='[%s/%s] –°–æ–∑–¥–∞—Ç—å —á–µ–∫ –Ω–∞ –±–æ–π' % (times[0], times[1]),
                                            description='‚úÖüî•üöΩüì¶üí§‚ùå',
                                            input_message_content=types.InputTextMessageContent("BATTLE PLACEHOLDER", parse_mode="markdown"),
                                            thumb_url="https://i.ibb.co/jb9nVCm/battle.png",
                                            reply_markup=kb.KEYBOARD_CHECK)
        bot.answer_inline_query(q.id, [res], is_personal=True, cache_time=2)
    else:
        log.error("Trying to setup another battle while current is not finished")
        error_text = "–£–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π –≤ %0.2d:%0.2d" \
                     % (current_battle.time["start"].hour, current_battle.time["start"].minute)
        bot.answer_inline_query(q.id, [], is_personal=True, cache_time=2,
                                switch_pm_text=error_text, switch_pm_parameter="existing_battle")

#
# Arsenal progress for battle
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data in kb.ARS_OPTIONS)
def arsenal_check_user(call):
    # print("arsenal_check_user")
    # print(call)
    message_id = call.inline_message_id
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    userChoice = call.data
    log.debug("User %d (%s %s) is trying to vote for arsenal (%s)" % (*user, userChoice.replace(cb.ARS_CALLBACK_PREFIX, "")))
    if current_arscheck:
        if message_id == current_arscheck.check_id:
            ret = current_arscheck.Increment(user, userChoice)
            if (ret):
                bot.edit_message_text(current_arscheck.GetText(), inline_message_id=message_id,
                                    parse_mode="markdown", reply_markup=kb.KEYBOARD_ARS)
                current_arscheck.CheckNotifyIfFired(current_battle, bot)
            else:
                log.error("Failed")
            bot.answer_callback_query(call.id)
            return
    log.error("Ars check not found!")
    bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")

#
# Arsenal control
# (war chat keyboard action)
#
@bot.callback_query_handler(func=lambda call: call.data in kb.ARS_CONTROL_OPTIONS)
def arsenal_control(call):
    # print("arsenal_control")
    # print(call)
    user = [call.from_user.id, call.from_user.username, call.from_user.first_name]
    log.debug("User %d (%s %s) is trying to control arsenal check" % (*user,))
    if not IsUserAdmin(call):
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–∫–æ–º –∞—Ä—Å–µ–Ω–∞–ª–∞!")
        log.error("Failed (not an admin)")
        return
    userChoice = call.data
    if userChoice == kb.ARS_CONTROL_OPTIONS[0]: # stop
        if (current_arscheck):
            current_arscheck.DoEndArsenal()
            bot.edit_message_text(current_arscheck.GetText(),
                                  inline_message_id=current_arscheck.check_id,
                                  parse_mode="markdown")
            bot.answer_callback_query(call.id, "üèÅ –ß–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return
    log.error("Ars check not found!")
    bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")

#
# Arsenal creation
# (war chat inline query)
#
@bot.inline_handler(lambda query: query.query[:len(COMMANDS["arsenal"])] == COMMANDS["arsenal"])
def arsenal_query_inline(q):
    # print("arsenal_query_inline")
    # print(q)
    user = [q.from_user.id, q.from_user.username, q.from_user.first_name]
    log.debug("User %d (%s %s) is trying to create arsenal check" % (*user,))
    if not IsUserAdmin(q): # non-admins cannot post votes
        log.error("Failed (not an admin)")
        SendHelpNonAdmin(q)
        bot.answer_callback_query(q.id)
        return
    if CanStartNewBattle():
        log.error("Trying to setup arsenal check with no current battle")
        error_text = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π"
        bot.answer_inline_query(q.id, [], is_personal=True, cache_time=2,
                                switch_pm_text=error_text, switch_pm_parameter="existing_battle")
        return
    rage = hlp.IsArsQuery(q)
    if rage[0]:
        if CanStartNewArs():
            global rage_time_workaround
            rage_time_workaround = rage[1][0]
            res = types.InlineQueryResultArticle('3',
                                                 title='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∞—Ä—Å–∞',
                                                 description='üì¶ |‚ñà‚ñà‚ñà‚ñà--| –•/120\n–Ø—Ä–æ—Å—Ç—å –≤ %s' % rage_time_workaround,
                                                 input_message_content=types.InputTextMessageContent("ARS PLACEHOLDER", parse_mode="markdown"),
                                                 thumb_url="https://i.ibb.co/WfxPRks/arsenal.png",
                                                 reply_markup=kb.KEYBOARD_ARS)
            bot.answer_inline_query(q.id, [res], is_personal=True, cache_time=2)
        else:
            log.error("Trying to setup another arsenal check while current has not been fired")
            error_text = "–£–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞"
            bot.answer_inline_query(q.id, [], is_personal=True, cache_time=2,
                                    switch_pm_text=error_text, switch_pm_parameter="existing_arsenal")
    else:
        bot.answer_inline_query(q.id, [], is_personal=True, cache_time=2,
                                switch_pm_text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", switch_pm_parameter="existing_arsenal")

####################
# Command handlers #
####################

#
# Help command
# (private bot chat)
#
@bot.message_handler(commands=["help"])
def show_help(m):
    userid = m.from_user.id
    text =  ICON_SWORDS+" –ü—Ä–∏–≤–µ—Ç! –Ø –≤–æ–µ–Ω–Ω—ã–π –±–æ—Ç –≥–∏–ª—å–¥–∏–∏ *Assassins*\n"
    text += "üéÆ –ò–≥—Ä–∞: *Dungeon Hunter V*"
    text += "\n\nüìÉ *–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥*:\n"
    text += "/help - –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n"
    text += "/admins - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–µ—Ä–æ–≤\n"
    if IsUserAdmin(m):
        text += "/warchat - –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ–µ–Ω–Ω—ã–π —á–∞—Ç (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—è)\n"
        text += "/reset - –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å–±—Ä–æ—Å –±–æ—Ç–∞\n"
        text += "\n*–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—è:*\n"
        text += "/bstart - –Ω–∞—á–∞—Ç—å –±–æ–π\n"
        text += "/bstop  - –∑–∞–≤–µ—Ä—à–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –±–æ–π\n"
        text += "/checklist  - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ç–µ–∫—É—â–µ–º –±–æ—é\n"
        if str(userid) == ROOT_ADMIN[0]:
            text += "/setadmins –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤ (–≤ –≤–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ)\n"
        text += "\n*–í –≤–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ:*\n" + \
                "_@assassinsgwbot —á–µ–∫_ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì\n" + \
                "_@assassinsgwbot XX:XX YY:YY_ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –Ω–∞ –±–æ–π (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–º–∏, –¥–∞–∂–µ –ø—Ä–æ–±–µ–ª–æ–º)\n" + \
                "_@assassinsgwbot –∞—Ä—Å XX:XX_ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ—è)\n" + \
                "_@assassinsgwbot –Ω–æ–º–µ—Ä–∞ X_ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –• –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Å–∫—Ä–∏–Ω–∞–º (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ—è)\n" + \
                "_@assassinsgwbot –Ω–æ–º–µ—Ä–∞ X Y Z ..._ - —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∏–≥—Ä–µ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ—è)"
    else:
        pass # stub for adding only non-admin help
    bot.send_message(userid, text, parse_mode="markdown")
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
    bot.delete_message(m.chat.id, m.message_id)

#
# Start pending battle
# (private bot chat)
#
@bot.message_handler(commands=['warchat'])
def command_set_warchat(m):
    if IsInPrivateChat(m): return
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
        return
    global warchat_id
    if warchat_id != None:
        bot.send_message(m.from_user.id, ICON_CANCEL+" –í–æ–µ–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –∑–∞–¥–∞–Ω!")
    else:
        warchat_id = m.chat.id
        bot.send_message(m.from_user.id, ICON_CHECK+" –í–æ–µ–Ω–Ω—ã–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω!")


#
# Start utility command
# (private bot chat)
#
@bot.message_handler(commands=['start'])
def command_start(m):
    # print("command_start")
    # print(m)
    if not IsInPrivateChat(m): return
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
        return
    inline_error = m.text.replace("/start ", "")
    if inline_error != "":
        if inline_error == "existing_precheck":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì.\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –ø–µ—Ä–µ–¥ –í–ì –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n" % ICON_STOP) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –æ—à–∏–±–æ—á–Ω–æ - –∑–∞–≤–µ—Ä—à–∏—Ç–µ —á–µ–∫, " + \
                    "–∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)
        elif inline_error == "existing_battle":
            if not CanStartNewBattle():
                text =  "–¢–µ–∫—É—â–∏–π –±–æ–π: %0.2d:%0.2d / %0.2d:%0.2d.\n\n" \
                        % (current_battle.time["check"].hour, current_battle.time["check"].minute,
                           current_battle.time["start"].hour, current_battle.time["start"].minute)
                text += ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å (%s) –ø—Ä–µ–¥—ã–¥—É—â–∏–π.\n" % ICON_STOP) + \
                         "–ï—Å–ª–∏ –±–æ–π –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –æ—à–∏–±–æ—á–Ω–æ - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ–π, " + \
                         "–∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
                bot.send_message(m.chat.id, text)
            else:
                hlp.SendHelpNoBattle(m.chat.id, bot)
        elif inline_error == "existing_arsenal":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –∞—Ä—Å–µ–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∂–µ—á—å (%s) –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) —Ç–µ–∫—É—â–∏–π.\n" % (ICON_RAGE, ICON_STOP)) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –∞—Ä—Å–∞ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ (–∏–ª–∏ —è—Ä–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –±–æ–µ) - " + \
                    "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)
        elif inline_error == "existing_numbers":
            text =  "–£–∂–µ –∏–º–µ–µ—Ç—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤\n\n" + \
                    ("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–Ω–æ–≤–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç–∏—á—å —Ö–æ—Ç—è –±—ã '500' –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (%s) –µ–≥–æ.\n" % ICON_STOP) + \
                    "–ï—Å–ª–∏ —á–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ (–∏–ª–∏ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ö–æ—Ç—è –±—ã '500') - " + \
                    "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç–µ."
            bot.send_message(m.chat.id, text)


#
# Start pending battle
# (private bot chat)
#
@bot.message_handler(commands=['bstart'])
def command_battle_start(m):
    if not IsInPrivateChat(m): return
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
        return
    if not CanStartNewBattle():
        if not current_battle.is_started:
            text = "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π [%0.2d:%0.2d]?" \
                    % (current_battle.time["start"].hour, current_battle.time["start"].minute)
            bot.send_message(m.chat.id, text, reply_markup=kb.KEYBOARD_START)
        else:
            bot.send_message(m.chat.id, "–ë–æ–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    else:
        hlp.SendHelpNoBattle(m.chat.id, bot)

#
# Stop current battle
# (private bot chat)
#
@bot.message_handler(commands=['bstop'])
def command_battle_stop(m):
    if not IsInPrivateChat(m): return
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
        return
    if not CanStartNewBattle():
        if not current_battle.is_postponed:
            text = "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ–π [%0.2d:%0.2d]?" \
                    % (current_battle.time["start"].hour, current_battle.time["start"].minute)
            bot.send_message(m.chat.id, text, reply_markup=kb.KEYBOARD_STOP)
        else:
            bot.send_message(m.chat.id, "–ë–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
    else:
        hlp.SendHelpNoBattle(m.chat.id, bot)

#
# Get check list for current battle
# (private bot chat)
#
@bot.message_handler(commands=['checklist'])
def command_battle_checklist(m):
    if not IsInPrivateChat(m): return
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
        return
    if not CanStartNewBattle():
        checklist = ""
        for user in current_battle.GetActiveUsersNames():
            checklist += user + "\n"
        bot.send_message(m.chat.id, checklist)
    else:
        hlp.SendHelpNoBattle(m.chat.id, bot)

#
# Update bot admins list
# (war chat where admins reside)
#
@bot.message_handler(commands=["setadmins"])
def setup_admins(m):
    global admins
    # print("setup_admins")
    # print(m)
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to update admins list" % (*user,))
    if not IsUserAdmin(m):
        log.error("Failed (not an admin)")
        SendHelpNonAdmin(m)
        return
    if IsInPrivateChat(m):
        log.error("Failed (in private chat)")
        bot.send_message(user[0], "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setadmins –≤ –≤–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤!")
        return
    is_chat_admin = False
    chat_admins = bot.get_chat_administrators(m.chat.id)
    for admin in chat_admins:
        if admin.user.id == user[0]:
            is_chat_admin = True
            break
    if not is_chat_admin:
        log.error("Failed (not a chat admin)")
        SendHelpNonAdmin(m)
        return
    admins = {}
    for admin in chat_admins:
        if str(admin.user.id) != ROOT_ADMIN[0] and admin.user.username != BOT_USERNAME:
            name_record = admin.user.first_name
            if admin.user.username != None:
                name_record += " (" + admin.user.username + ")"
            admins[str(admin.user.id)] = name_record
    SaveAdminsList()
    bot.send_message(m.chat.id, "üëÆüèª‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
    log.info("Admins list updated")

#
# Manage admins
# (private bot chat)
#
@bot.message_handler(commands=["admins"])
def manage_admins(m):
    # print("manage_admins")
    # print(m)
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to check admins list" % (*user,))
    if not IsInPrivateChat(m):
        bot.delete_message(m.chat.id, m.message_id)
        bot.send_message(user[0], "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admins –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤!")
        return
    text =  "–°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–µ—Ä–æ–≤:\n\n"
    text += "üëÅ %s _[–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞]_\n" % ROOT_ADMIN[1]
    for admin in admins:
        if BOT_USERNAME not in admin or admin != ROOT_ADMIN[1]:
            if str(user[0]) == ROOT_ADMIN[0]: # show admins IDs for root admin
                text += ICON_MEMBER+" %s _(ID=%s)_\n" % (admins[admin], admin)
            else:
                text += (ICON_MEMBER+" %s\n" % admins[admin])
    bot.send_message(user[0], text, parse_mode="markdown")
    return

#
# Emergency reset all checks
# (private bot chat)
#
@bot.message_handler(commands=['reset'])
def command_reset(m):
    if not IsInPrivateChat(m): return
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
        return
    user = [m.from_user.id, m.from_user.username, m.from_user.first_name]
    log.debug("User %d (%s %s) is trying to reset bot" % (*user,))
    bot.send_message(m.chat.id, "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å?", reply_markup=kb.KEYBOARD_RESET)

#
# Emergency reset control
# (private bot chat)
#
@bot.message_handler(func=lambda message: message.text in kb.RESET_CONTROL_OPTIONS)
def reset_control(m):
    try:
        if not IsInPrivateChat(m): return
    except: # issue when resetting checks via battle stop. could be ignored
        pass
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
        return
    markup = types.ReplyKeyboardRemove(selective=False)
    try:
        if m.text == kb.RESET_CONTROL_OPTIONS[1]: # cancel
            bot.send_message(m.from_user.id, "‚õîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
            log.debug("Reset calcelled")
            return
        else:
            raise Exception()
    except:
        global current_precheck, current_battle, current_arscheck, current_numcheck
        if current_precheck:
            current_precheck.DoEndPrecheck()
            bot.edit_message_text(current_precheck.GetText(), inline_message_id=current_precheck.check_id,
                                  parse_mode="markdown")
            current_precheck = None
        if current_battle:
            current_battle.DoEndBattle()
            bot.edit_message_text(current_battle.GetText(), inline_message_id=current_battle.check_id,
                                  parse_mode="markdown")
            current_battle = None
        if current_arscheck:
            current_arscheck.DoEndArsenal()
            bot.edit_message_text(current_arscheck.GetText(), inline_message_id=current_arscheck.check_id,
                                  parse_mode="markdown")
            current_arscheck = None
        if current_numcheck:
            current_numcheck.DoEndCheck()
            bot.edit_message_text(current_numcheck.GetText(), inline_message_id=current_numcheck.check_id,
                                  parse_mode="markdown")
            current_numcheck = None
    try:
        bot.send_message(m.from_user.id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω", reply_markup=markup)
    except: # no need to send private message if checks have been reset via battle control
        pass
    log.debug("Reset successful")

#
# Battle control (from bot private chat)
#
@bot.message_handler(func=lambda message: message.text in kb.CHECK_CONTROL_OPTIONS_PRIVATE)
def battle_control(m):
    if not IsInPrivateChat(m): return
    if not IsUserAdmin(m):
        SendHelpNonAdmin(m)
        return
    markup = types.ReplyKeyboardRemove(selective=False)
    if m.text == kb.buttonStartPrivate.text:
        current_battle.DoStartBattle()
        bot.edit_message_text(current_battle.GetText(), inline_message_id=current_battle.check_id, 
                              parse_mode="markdown", reply_markup=kb.KEYBOARD_LATE)
        bot.send_message(m.chat.id, "‚úÖ –ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", reply_markup=markup)
        current_battle.BattleStartNotifyActiveUsers(bot)
    elif m.text == kb.buttonStopPrivate.text:
        reset_control(m)
        bot.send_message(m.chat.id, "‚ùé –ë–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=markup)
    else: # –û—Ç–º–µ–Ω–∞
        bot.send_message(m.chat.id, "‚õîÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)


if "HEROKU" in list(os.environ.keys()):
    log.warning("Running on Heroku, setup webhook")
    server = Flask(__name__)

    @server.route('/bot' + TOKEN, methods=['POST'])
    def getMessage():
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return "!", 200

    @server.route("/")
    def webhook():
        sleep(1)
        bot.set_webhook(url='https://' + BOT_USERNAME + '.herokuapp.com/bot' + TOKEN)
        return "?", 200
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 80)))
else:
    log.warning("Running locally, start polling")
    bot.remove_webhook()
    bot.polling(none_stop=True, interval=0, timeout=20)
